{"ast":null,"code":"import { Environment } from '../environments/environment';\nimport { forkJoin, Subject, interval, merge, switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.serverEndpoint = `${Environment.apiUrl}`;\n    this.cartData$ = new Subject();\n    this.wishCountData$ = new Subject();\n    this.refreshInterval = 1000;\n    //atm stock \n    this.stockUrl = Environment.stockUrl;\n    // state\n    this.stateUrl = Environment.stateUrl;\n    if (Environment.production) {\n      this.serverEndpoint = Environment.apiUrl;\n    }\n  }\n  /**\n   *\n   * @param endpoint\n   * @param data\n   * @param headers\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  post(endpoint, data, headers) {\n    return this.http.post(this.serverEndpoint + endpoint, data, headers);\n  }\n  /**\n   *\n   * @param endpoint\n   * @param params\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  get(endpoint, params) {\n    return this.http.get(this.serverEndpoint + endpoint, params);\n  }\n  liveprice() {\n    const endPoint = `/global/price/list`;\n    // return this.http.get(this.serverEndpoint + endPoint),interval(this.refreshInterval);\n    return merge(this.http.get(this.serverEndpoint + endPoint), interval(this.refreshInterval).pipe(switchMap(() => this.http.get(this.serverEndpoint + endPoint))));\n  }\n  /**\n   *\n   * @param endpoint\n   * @param params\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  delete(endpoint, params) {\n    return this.http.delete(this.serverEndpoint + endpoint, params);\n  }\n  /**\n   *\n   * @param endpoint\n   * @param params\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  put(endpoint, params) {\n    return this.http.put(this.serverEndpoint + endpoint, params);\n  }\n  getStock(atmId) {\n    return this.http.get(`${this.stockUrl}${atmId}`);\n  }\n  getStocks(atmIds) {\n    const requests = atmIds.map(id => this.getStock(id));\n    return forkJoin(requests);\n  }\n  getStates() {\n    return this.http.get(this.stateUrl);\n  }\n  static #_ = this.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Environment","forkJoin","Subject","interval","merge","switchMap","ApiService","constructor","http","serverEndpoint","apiUrl","cartData$","wishCountData$","refreshInterval","stockUrl","stateUrl","production","post","endpoint","data","headers","get","params","liveprice","endPoint","pipe","delete","put","getStock","atmId","getStocks","atmIds","requests","map","id","getStates","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\xampp\\htdocs\\goldatm.gold\\src\\app\\api.service.ts"],"sourcesContent":["\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Environment } from '../environments/environment';\r\nimport { BehaviorSubject, Observable, forkJoin, Subject, catchError, interval, merge, switchMap, throwError } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService {\r\n  serverEndpoint = `${Environment.apiUrl}`;\r\n  public cartData$: Subject<any> = new Subject;\r\n  public wishCountData$: Subject<any> = new Subject;\r\n  private refreshInterval = 1000;\r\n\r\n  constructor(private http: HttpClient) {\r\n    if (Environment.production) {\r\n      this.serverEndpoint = Environment.apiUrl;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param endpoint\r\n   * @param data\r\n   * @param headers\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  post(endpoint: any, data: any, headers?: {}) {\r\n    return this.http.post(this.serverEndpoint + endpoint, data, headers);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param endpoint\r\n   * @param params\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  get(endpoint: string, params?: {}) {\r\n    return this.http.get(this.serverEndpoint + endpoint, params);\r\n  }\r\n  liveprice() {\r\n    const endPoint = `/global/price/list`\r\n    // return this.http.get(this.serverEndpoint + endPoint),interval(this.refreshInterval);\r\n    return merge(this.http.get<any>(this.serverEndpoint + endPoint), interval(this.refreshInterval).pipe(\r\n      switchMap(() => this.http.get<any>(this.serverEndpoint + endPoint))\r\n    ));\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * @param endpoint\r\n   * @param params\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  delete(endpoint: string, params?: {}) {\r\n    return this.http.delete(this.serverEndpoint + endpoint, params);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param endpoint\r\n   * @param params\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  put(endpoint: string, params?: {}) {\r\n    return this.http.put(this.serverEndpoint + endpoint, params);\r\n  }\r\n\r\n  //atm stock \r\n  @Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  private stockUrl = Environment.stockUrl;\r\n\r\n  getStock(atmId: string): Observable<any> {\r\n    return this.http.get(`${this.stockUrl}${atmId}`);\r\n  }\r\n\r\n  getStocks(atmIds: string[]): Observable<any[]> {\r\n    const requests = atmIds.map(id => this.getStock(id));\r\n    return forkJoin(requests);\r\n  }\r\n  // state\r\n  private stateUrl = Environment.stateUrl;\r\n  getStates(): Observable<any> {\r\n    return this.http.get<any>(this.stateUrl);\r\n  }\r\n}"],"mappings":"AAGA,SAASA,WAAW,QAAQ,6BAA6B;AACzD,SAAsCC,QAAQ,EAAEC,OAAO,EAAcC,QAAQ,EAAEC,KAAK,EAAEC,SAAS,QAAoB,MAAM;;;AAKzH,OAAM,MAAOC,UAAU;EAMrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IALxB,KAAAC,cAAc,GAAG,GAAGT,WAAW,CAACU,MAAM,EAAE;IACjC,KAAAC,SAAS,GAAiB,IAAIT,OAAO,CAAP,CAAO;IACrC,KAAAU,cAAc,GAAiB,IAAIV,OAAO,CAAP,CAAO;IACzC,KAAAW,eAAe,GAAG,IAAI;IAyD9B;IAIQ,KAAAC,QAAQ,GAAGd,WAAW,CAACc,QAAQ;IAUvC;IACQ,KAAAC,QAAQ,GAAGf,WAAW,CAACe,QAAQ;IArErC,IAAIf,WAAW,CAACgB,UAAU,EAAE;MAC1B,IAAI,CAACP,cAAc,GAAGT,WAAW,CAACU,MAAM;;EAE5C;EAEA;;;;;;EAMA;EACAO,IAAIA,CAACC,QAAa,EAAEC,IAAS,EAAEC,OAAY;IACzC,OAAO,IAAI,CAACZ,IAAI,CAACS,IAAI,CAAC,IAAI,CAACR,cAAc,GAAGS,QAAQ,EAAEC,IAAI,EAAEC,OAAO,CAAC;EACtE;EAEA;;;;;EAKA;EACAC,GAAGA,CAACH,QAAgB,EAAEI,MAAW;IAC/B,OAAO,IAAI,CAACd,IAAI,CAACa,GAAG,CAAC,IAAI,CAACZ,cAAc,GAAGS,QAAQ,EAAEI,MAAM,CAAC;EAC9D;EACAC,SAASA,CAAA;IACP,MAAMC,QAAQ,GAAG,oBAAoB;IACrC;IACA,OAAOpB,KAAK,CAAC,IAAI,CAACI,IAAI,CAACa,GAAG,CAAM,IAAI,CAACZ,cAAc,GAAGe,QAAQ,CAAC,EAAErB,QAAQ,CAAC,IAAI,CAACU,eAAe,CAAC,CAACY,IAAI,CAClGpB,SAAS,CAAC,MAAM,IAAI,CAACG,IAAI,CAACa,GAAG,CAAM,IAAI,CAACZ,cAAc,GAAGe,QAAQ,CAAC,CAAC,CACpE,CAAC;EACJ;EAGA;;;;;EAKA;EACAE,MAAMA,CAACR,QAAgB,EAAEI,MAAW;IAClC,OAAO,IAAI,CAACd,IAAI,CAACkB,MAAM,CAAC,IAAI,CAACjB,cAAc,GAAGS,QAAQ,EAAEI,MAAM,CAAC;EACjE;EAEA;;;;;EAKA;EACAK,GAAGA,CAACT,QAAgB,EAAEI,MAAW;IAC/B,OAAO,IAAI,CAACd,IAAI,CAACmB,GAAG,CAAC,IAAI,CAAClB,cAAc,GAAGS,QAAQ,EAAEI,MAAM,CAAC;EAC9D;EAQAM,QAAQA,CAACC,KAAa;IACpB,OAAO,IAAI,CAACrB,IAAI,CAACa,GAAG,CAAC,GAAG,IAAI,CAACP,QAAQ,GAAGe,KAAK,EAAE,CAAC;EAClD;EAEAC,SAASA,CAACC,MAAgB;IACxB,MAAMC,QAAQ,GAAGD,MAAM,CAACE,GAAG,CAACC,EAAE,IAAI,IAAI,CAACN,QAAQ,CAACM,EAAE,CAAC,CAAC;IACpD,OAAOjC,QAAQ,CAAC+B,QAAQ,CAAC;EAC3B;EAGAG,SAASA,CAAA;IACP,OAAO,IAAI,CAAC3B,IAAI,CAACa,GAAG,CAAM,IAAI,CAACN,QAAQ,CAAC;EAC1C;EAAC,QAAAqB,CAAA,G;qBA/EU9B,UAAU,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAVnC,UAAU;IAAAoC,OAAA,EAAVpC,UAAU,CAAAqC,IAAA;IAAAC,UAAA,EAFT;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}